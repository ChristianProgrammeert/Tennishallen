// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tennishallen.Data;

#nullable disable

namespace Tennishallen.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240408110025_court")]
    partial class court
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tennishallen.Data.Models.Court", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Courts");
                });

            modelBuilder.Entity("Tennishallen.Data.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = 0,
                            UserId = new Guid("2db2301d-4e06-49f1-82be-3f9ddbc64da8")
                        },
                        new
                        {
                            Id = 2,
                            Name = 0,
                            UserId = new Guid("2dd43519-a8e0-4831-a646-732026386805")
                        },
                        new
                        {
                            Id = 3,
                            Name = 0,
                            UserId = new Guid("f663d196-ac33-431d-9a55-3c53f554ebb6")
                        },
                        new
                        {
                            Id = 4,
                            Name = 0,
                            UserId = new Guid("f722fe00-bfcc-4814-88c3-896c39a6113d")
                        },
                        new
                        {
                            Id = 5,
                            Name = 0,
                            UserId = new Guid("b1ee2eb9-1ff5-4e8c-b542-b1e2138887b6")
                        });
                });

            modelBuilder.Entity("Tennishallen.Data.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CourtId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("CourtId");

                    b.HasIndex("MemberId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Tennishallen.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("HourlyWage")
                        .HasColumnType("float");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2db2301d-4e06-49f1-82be-3f9ddbc64da8"),
                            Active = true,
                            Address = "Tennisstraat 1",
                            Birthdate = new DateOnly(1, 1, 1),
                            City = "Hengelo",
                            Email = "r.vandongen@tennishallenhengelo.nl",
                            FirstName = "Richard",
                            HourlyWage = 0.0,
                            LastName = "van Dongen",
                            Password = "$2a$10$0dvXFxGlhIbMQF0Za7tCx.TypVAiDATGO7jh4ohcXaL77oHWV/qHW",
                            Phone = "06 12345678",
                            PostalCode = "1234TB"
                        },
                        new
                        {
                            Id = new Guid("2dd43519-a8e0-4831-a646-732026386805"),
                            Active = true,
                            Address = "Tennisstraat 2",
                            Birthdate = new DateOnly(1, 1, 1),
                            City = "Hengelo",
                            Email = "B.Hand@tennishallenhengelo.nl",
                            FirstName = "Beck",
                            HourlyWage = 0.0,
                            LastName = "Hand",
                            Password = "$2a$10$XqZLSpyR9Gr3.jH/J1zt5OEKVvOJxeD5SP7geZQxyts49sIzhsmNS",
                            Phone = "06 98152523",
                            PostalCode = "1234TB"
                        },
                        new
                        {
                            Id = new Guid("f663d196-ac33-431d-9a55-3c53f554ebb6"),
                            Active = true,
                            Address = "Tennisstraat 3",
                            Birthdate = new DateOnly(1, 1, 1),
                            City = "Hengelo",
                            Email = "G.Slam@tennishallenhengelo.nl",
                            FirstName = "Grant",
                            HourlyWage = 0.0,
                            LastName = "Slam",
                            Password = "$2a$10$KQCndWH.YX9NKtRj.Q.vIu251ETtVQLp7M/WpugdSk3xD45ZKQrwS",
                            Phone = "06 64665037",
                            PostalCode = "1234TB"
                        },
                        new
                        {
                            Id = new Guid("f722fe00-bfcc-4814-88c3-896c39a6113d"),
                            Active = true,
                            Address = "Tennisstraat 4",
                            Birthdate = new DateOnly(1, 1, 1),
                            City = "Hengelo",
                            Email = "T.Ishbahl@tennishallenhengelo.nl",
                            FirstName = "Tehn",
                            HourlyWage = 0.0,
                            LastName = "Ishbahl",
                            Password = "$2a$10$0SlB7lC4GrEjB5MCDrP0DuVBaBRw..RTtNvGNJiopVi/yiRsQn2QO",
                            Phone = "06 50917581",
                            PostalCode = "1234TB"
                        },
                        new
                        {
                            Id = new Guid("b1ee2eb9-1ff5-4e8c-b542-b1e2138887b6"),
                            Active = true,
                            Address = "Tennisstraat 5",
                            Birthdate = new DateOnly(1, 1, 1),
                            City = "Hengelo",
                            Email = "C.Racket@tennishallenhengelo.nl",
                            FirstName = "Courtney",
                            HourlyWage = 0.0,
                            LastName = "Racket",
                            Password = "$2a$10$JXGHodl1IAn5pQkBq5cCLeHZg8vwYBunYqyelJ5igi4.tGC5JUTIi",
                            Phone = "06 25018196",
                            PostalCode = "1234TB"
                        });
                });

            modelBuilder.Entity("Tennishallen.Data.Models.Group", b =>
                {
                    b.HasOne("Tennishallen.Data.Models.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tennishallen.Data.Models.Reservation", b =>
                {
                    b.HasOne("Tennishallen.Data.Models.User", "Coach")
                        .WithMany("CoachReservations")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Tennishallen.Data.Models.Court", "Court")
                        .WithMany("Reservations")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tennishallen.Data.Models.User", "Member")
                        .WithMany("MemberReservations")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Coach");

                    b.Navigation("Court");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Tennishallen.Data.Models.Court", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Tennishallen.Data.Models.User", b =>
                {
                    b.Navigation("CoachReservations");

                    b.Navigation("Groups");

                    b.Navigation("MemberReservations");
                });
#pragma warning restore 612, 618
        }
    }
}
